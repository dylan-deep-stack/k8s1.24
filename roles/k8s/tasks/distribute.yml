---
# 分发证书
- name: Get etcd certificate
  slurp:
    src: /etc/kubernetes/pki/etcd/{{ item }} 
  with_items:
  - ca.crt
  - ca.key
  - healthcheck-client.crt
  - healthcheck-client.key
  - peer.crt
  - peer.key
  - server.crt
  - server.key
  register: etcd_certs
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: true

- name: Distribute etcd certificate to etcd node
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ etcd_certs.results }}"
  when: 
  - inventory_hostname != groups['kube-master'][0] 
  - inventory_hostname in groups['kube-master']

- name: Get apiserver etcd client certificate
  slurp:
    src: /etc/kubernetes/pki/{{ item }} 
  with_items:
  - etcd/ca.crt
  - apiserver-etcd-client.crt
  - apiserver-etcd-client.key
  register: etcd_client_certs
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: true

- name: Distribute apiserver etcd client certificate to master node
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ etcd_client_certs.results }}"
  when: 
  - inventory_hostname != groups['kube-master'][0] 
  - inventory_hostname in groups['kube-master']
 
# 分发certificate
- name: Get kubernetes master node certificate
  slurp:
    src: /etc/kubernetes/pki/{{ item }}
  with_items:
  - admin.crt
  - admin.key
  - apiserver.crt
  - apiserver.key
  - apiserver-kubelet-client.crt
  - apiserver-kubelet-client.key
  - ca.crt
  - ca.key
  - front-proxy-ca.crt
  - front-proxy-ca.key
  - front-proxy-client.crt
  - front-proxy-client.key
  - kube-controller-manager.crt
  - kube-scheduler.crt
  - kube-scheduler.key
  - sa.key
  - sa.pub
  register: kubernetes_master_certs
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: Distribute kubernetes master certificate to master node
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ kubernetes_master_certs.results }}"
  when: 
  - inventory_hostname != groups['kube-master'][0]
  - inventory_hostname in groups['kube-master']

- name: Get kubelet service certificate
  slurp:
    src: /var/lib/kubelet/pki/{{ item }}
  with_items:
  - kubelet.crt
  - kubelet.key
  register: kubelet_certs
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: Distribute kubelet service certificate to all nodes
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ kubelet_certs.results }}"
  when: 
  - inventory_hostname != groups['kube-master'][0]
  - inventory_hostname in groups['kube-master']
